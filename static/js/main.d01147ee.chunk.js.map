{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","console","log","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"mQAgBeA,EAbF,SAACC,GACb,OACE,yBAAKC,UAAU,oDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAAMI,GAAjC,cACpB,6BACE,gCAAOJ,EAAMK,KAAb,KADF,IAEG,+BAAML,EAAMM,MAAZ,KAFH,OCmBUC,EAvBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,6BAGGA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACHP,GAAII,EAAOG,GAAGP,GACfC,KAAMG,EAAOG,GAAGN,KACfC,MAAOE,EAAOG,GAAGL,aCFXO,EAVG,SAAC,GAAiC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,2BAAOd,UAAU,mCACbe,KAAK,SACLC,YAAY,qBACZC,SAAYH,KCEJI,EAPA,SAACnB,GACf,OACC,yBAAKoB,MAAS,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACrEvB,EAAMwB,WCmBKC,E,YArBd,WAAYzB,GAAO,IAAD,8BACjB,+CACK0B,MAAO,CACXC,UAAU,GAHM,E,+EAOAC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACN,oDAEAG,KAAK9B,MAAMwB,a,GAhBMQ,a,yBC6DZC,E,YAjDd,aAAc,IAAD,8BACX,+CAODC,eAAiB,SAACC,GACjBC,QAAQC,IAAIF,EAAMG,OAAOC,OAEzB,EAAKR,SAAS,CAACjB,YAAaqB,EAAMG,OAAOC,SATzC,EAAKb,MAAO,CACVlB,OAAO,GACPM,YAAY,IAJH,E,iFAeQ,IAAD,OAClB0B,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAG,EAAKb,SAAS,CAAEvB,OAAOoC,S,+BAIhC,IAAD,OAEDC,EAAiBf,KAAKJ,MAAMlB,OAAOsC,QAAO,SAAAC,GAC9C,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAS,EAAKvB,MAAMZ,YAAYkC,kBAGlE,OAAiC,IAA7BlB,KAAKJ,MAAMlB,OAAO0C,OACd,+CAGC,yBAAKjD,UAAU,MAChB,kBAAC,IAAD,KACL,wBAAIA,UAAU,MAAd,gBAEU,kBAAC,EAAD,CAAWc,aAAiBe,KAAKI,iBAClC,kBAAC,EAAD,KACC,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAU1B,OAAWqC,W,GAxCrBb,aCDEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLQ,QAAQR,MAAMA,EAAMsC,c","file":"static/js/main.d01147ee.chunk.js","sourcesContent":["import React from 'react';\n\n \nconst Card = (props) => {\n\treturn(\n\t\t\t<div className='tc bg-light-green dib br3 ma2 grow bw20 shadow-5'> \n\t\t\t\t<img alt='robots' src ={`https://robohash.org/${props.id}?200x200`}/>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t <h2> { props.name } </h2>\t{ /*<h2> {name}</h2> */ }\t\n\t\t\t\t\t\t  <p> { props.email } </p>\t{ /* <p> {email} </p> */ }\t\n\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n}\n\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\t\n\treturn( \n\t\t<div>\n\t\t{\n\t\t\t\n\t\t\t  robots.map((user, i) => { \t\t \t\t\t\t\t\t\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t \t \tid={robots[i].id} \n\t\t\t\t\t \t\tname={robots[i].name}\n\t\t\t\t\t  \t\temail={robots[i].email}\n\t\t\t\t\t  \t\t/> \n\t\t\t\t\t  \t);\t\n\t\t\t\t\t})\n\n\t\t\t\t}\n\t\t</div>\n\t\t \t\t\n\t\t\n\t\t\t);\n\t\t}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange }) => {\n\treturn (\n\t\t\t<input className=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\t\t   type='search' \n\t\t\t\t   placeholder='search RoboFriends'\n\t\t\t\t   onChange ={ searchChange } />\t\n\n\t\t\t);\n}\n\nexport default SearchBox;\n\n","import React from 'react';\n\nconst Scroll = (props) =>{\n\treturn (\n\t\t<div style = {{overflowY: 'scroll', border: '3px solid black', height: '500px'}} >\n\t\t{ props.children }\n\t\t</div>)\n};\n\nexport default Scroll;\n\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props){  //to have access to props inside constructor : constructor(props)\n\t\tsuper();\n\t\tthis.state ={\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info){\n\t\tthis.setState({ hasError: true}); //if component errors out we set hasError ot true\n\t}\n\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1> aaaaaa..Errorrr....</h1>  //if error this gets displayed\n\t\t}\n\t\treturn  this.props.children  //else if no error we return the children of the ErrorBoundry comp\n\t}\t\n\n\n}\n\nexport default ErrorBoundry; ","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\nimport Zoom from 'react-reveal/Zoom';\n\n\n\n\n\n\nclass App extends Component {\n\tconstructor(){\n\t\t\tsuper()\n\t\t\tthis.state ={\n\t\t\t\t\trobots:[],\n\t\t\t\t\tsearchfield:''\n\t\t\t}\n\t\t}\n\n\t\tonSearchChange = (event) => {\n\t\t\tconsole.log(event.target.value); \n\t\t\t\n\t\t\tthis.setState({searchfield: event.target.value});\n\t\t\n\t\t}\n\n\t\tcomponentDidMount(){\n\t\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t\t.then(response=> response.json())\n\t\t\t\t .then(users=> this.setState({ robots:users }))\n\t\t\t}\n\n\n\trender(){\n\t\t\n\t\tconst filteredRobots = this.state.robots.filter(robot =>{\n\t\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t\t\t})\n\n\t\tif (this.state.robots.length === 0){\n\t\t\treturn <h1>Loading  . . . </h1>\n\t\t} else { \n\t \t return (\n         \t <div className=\"tc\">\n\t    \t   \t<Zoom>\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t</Zoom>\n         \t     <SearchBox searchChange = { this.onSearchChange }/>                  \n          \t  \t<Scroll>\n          \t  \t\t<ErrorBoundry>\t\n          \t  \t  \t\t<CardList robots = { filteredRobots }/> \n          \t  \t  \t</ErrorBoundry>\n         \t\t</Scroll>\n         \t </div>\n         \t\t )\n\t\t\t}\n\t\t} }\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker'; \nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}